package com.nagarro.Mini_Assignment_2.controller;

//UserController.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nagarro.Mini_Assignment_2.dtos.PageInfo;
import com.nagarro.Mini_Assignment_2.dtos.UserCreationRequest;
import com.nagarro.Mini_Assignment_2.dtos.UserResponse;
import com.nagarro.Mini_Assignment_2.entities.User;
import com.nagarro.Mini_Assignment_2.exception.CustomException;
import com.nagarro.Mini_Assignment_2.serviceImpl.UserService;
import com.nagarro.Mini_Assignment_2.validators.ValidatorFactory;

import jakarta.validation.Valid;
import jakarta.validation.Validator;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Positive;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/users")
public class UserController {

	private final UserService userService;
	private final ValidatorFactory validatorFactory;

	@Autowired
	public UserController(UserService userService, ValidatorFactory validatorFactory) {
		this.userService = userService;
		this.validatorFactory = validatorFactory;
	}

	@PostMapping
	public ResponseEntity<?> createUsers(@RequestBody @Valid UserCreationRequest request) {
//		try {
		int size = request.getSize();
		List<UserResponse> users = userService.createUser(size);
		return ResponseEntity.ok(users);
//		} catch (CustomException ex) {
//			return ResponseEntity.status(ex.getStatusCode()).body(Map.of("message", ex.getMessage(), "code",
//					ex.getStatusCode(), "timestamp", System.currentTimeMillis()));
//		} catch (Exception ex) {
//			return ResponseEntity.status(500).body(
//					Map.of("message", "Internal Server Error", "code", 500, "timestamp", System.currentTimeMillis()));
//		}
	}

	@GetMapping
	public ResponseEntity<Map<String, Object>> getUsers(@RequestParam String sortType, @RequestParam String sortOrder,
			@RequestParam int limit, @RequestParam int offset) {

		validateInput("SortType", sortType);
		validateInput("SortOrder", sortOrder);
		validateInput("Limit", String.valueOf(limit));
		validateInput("Offset", String.valueOf(offset));

		PageInfo pageInfo = new PageInfo();
		List<User> users = userService.getUsers(sortType, sortOrder, limit, offset, pageInfo);

		Map<String, Object> response = new HashMap<>();
		response.put("data", users);
		response.put("pageInfo", pageInfo);

		return new ResponseEntity<>(response, HttpStatus.OK);

//		} catch (CustomException ex) {
//			return ResponseEntity.status(ex.getStatusCode()).body(Map.of("message", ex.getMessage(), "code",
//					ex.getStatusCode(), "timestamp", System.currentTimeMillis()));
//		} catch (Exception ex) {
//			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//					.body(Map.of("message", "Internal Server Error", "code", HttpStatus.INTERNAL_SERVER_ERROR.value(),
//							"timestamp", System.currentTimeMillis()));
//		}
	}

	private void validateInput(String parameterName, String value) {
		Validator validator = (Validator) validatorFactory.getValidator(value);
		if (!validator.validate(value)) {
			throw new BadRequestException("Invalid " + parameterName + ": " + value);
		}
	}
}
