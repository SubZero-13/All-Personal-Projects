package com.nagarro.Mini_Assignment_2.serviceImpl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.nagarro.Mini_Assignment_2.dtos.Results;
import com.nagarro.Mini_Assignment_2.dtos.UserInfo;
import com.nagarro.Mini_Assignment_2.dtos.UserResponse;
import com.nagarro.Mini_Assignment_2.entities.User;
import com.nagarro.Mini_Assignment_2.enums.VerificationResult;
import com.nagarro.Mini_Assignment_2.exception.CustomException;
import com.nagarro.Mini_Assignment_2.repos.UserRepository;

@Service
public class UserService {

	private final ApiService apiService;
	private final VerificationService verificationService;
	private final UserRepository repo;

	@Autowired
	public UserService(ApiService apiService, VerificationService verificationService, UserRepository repo) {
		this.apiService = apiService;
		this.verificationService = verificationService;
		this.repo = repo;
	}

	public List<UserResponse> createUser(int size) {
		List<UserResponse> users = new ArrayList<>();

		for (int i = 0; i < size; i++) {
			try {
				Results results = apiService.getUserDetails();
				UserInfo userDetails = results.getResults().get(0);

				VerificationResult verificationResult = verificationService.verifyUser(userDetails);
				User user = new User();
				String fullName = userDetails.getName().getFirst() + " " + userDetails.getName().getLast();
				user.setName(fullName);
				user.setAge(userDetails.getDob().getAge());
				user.setDob(userDetails.getDob().getDate());

				user.setGender(userDetails.getGender());
				user.setNationality(userDetails.getNat());
				user.setVerificationStatus(verificationResult.name());
//				user.setVerificationStatus(verificationResult.name());

				repo.save(user);

				UserResponse response = new UserResponse();
				response.setName(user.getName());
				response.setDob(user.getDob());
				response.setAge(user.getAge());
				response.setGender(user.getGender());
				response.setNationality(user.getNationality());
				response.setVerificationStatus(user.getVerificationStatus());
				users.add(response);
			} catch (CustomException ex) {
				throw ex;
			} catch (Exception ex) {
				throw new CustomException("Error creating user", 500);
			}
		}
		return users;
	}

	public List<User> getUsers(String sortType, String sortOrder, int limit, int offset) {
		PageRequest pageRequest = PageRequest.of(offset, limit);
		Page<User> usersPage;

		if ("Name".equalsIgnoreCase(sortType)) {
			usersPage = repo.findAll(pageRequest);
		} else {
			usersPage = repo.findAllByOrderByAge(pageRequest);
		}

		List<User> users = usersPage.getContent();
		if ("EVEN".equalsIgnoreCase(sortOrder)) {
			users.removeIf(user -> user.getAge() % 2 != 0);
		} else {
			users.removeIf(user -> user.getName().length() % 2 != 1);
		}

		return users;
	}

}
