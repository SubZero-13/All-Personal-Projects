package com.nagarro.Mini_Assignment_2.controller;

//import static org.junit.jupiter.api.Assertions.*;

//import static org.mockito.ArgumentMatchers.*;
//import static org.mockito.Mockito.*;
//
//import java.util.Arrays;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//import org.mockito.InjectMocks;
//import org.mockito.Mock;
//import org.mockito.MockitoAnnotations;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//
//import com.nagarro.Mini_Assignment_2.controller.UserController;
//import com.nagarro.Mini_Assignment_2.dtos.PageInfo;
//import com.nagarro.Mini_Assignment_2.dtos.UserCreationRequest;
//import com.nagarro.Mini_Assignment_2.dtos.UserResponse;
//import com.nagarro.Mini_Assignment_2.entities.User;
//import com.nagarro.Mini_Assignment_2.serviceImpl.UserService;
//import com.nagarro.Mini_Assignment_2.validators.Validator;
//import com.nagarro.Mini_Assignment_2.validators.ValidatorFactory;
//
//class UserControllerTest {
//
//	@Mock
//	private UserService userService;
//
//	@Mock
//	private ValidatorFactory validatorFactory;
//
//	@InjectMocks
//	private UserController userController;
//
//	@BeforeEach
//	void setUp() {
//		MockitoAnnotations.openMocks(this);
//	}
//
//	@Test
//	void testCreateUsers() {
//		// Arrange
//		UserCreationRequest request = new UserCreationRequest();
//		request.setSize(5);
//
//		List<UserResponse> mockUserResponses = Arrays.asList(new UserResponse(), new UserResponse());
//		when(userService.createUser(anyInt())).thenReturn(mockUserResponses);
//
//		// Act
//		ResponseEntity<?> responseEntity = userController.createUsers(request);
//
//		// Assert
//		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
//		assertEquals(mockUserResponses, responseEntity.getBody());
//	}
//}

import com.nagarro.Mini_Assignment_2.dtos.PageInfo;
import com.nagarro.Mini_Assignment_2.entities.User;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import com.nagarro.Mini_Assignment_2.controller.UserController;
import com.nagarro.Mini_Assignment_2.serviceImpl.UserService;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class UserControllerTest {

	@Mock
	private UserService userService;

	@InjectMocks
	private UserController userController;

	@Test
	void testGetUsersEndpoint() {
		// Mock data
		List<User> mockUsers = Arrays.asList(
				new User(1L, "Kazimira Shabliy", 67, "female", "15 March 1956", "UA", "VERIFIED",
						"Sat, 02 Dec 2023 14:37:14", "Sat, 02 Dec 2023 14:37:14"),
				new User(2L, "Rosa Oliver", 41, "female", "04 September 1982", "US", "TO_BE_VERIFIED",
						"Sat, 02 Dec 2023 15:06:34", "Sat, 02 Dec 2023 15:06:34"));

		PageInfo mockPageInfo = new PageInfo(true, false, 2);

		// Mock service method
		when(userService.getUsers(anyString(), anyString(), anyInt(), anyInt(), any())).thenReturn(mockUsers);

		// Call the controller method
		ResponseEntity<Map<String, Object>> responseEntity = userController.getUsers("Age", "Odd", "2", "0");

		// Assert the response
		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());

		Map<String, Object> responseBody = responseEntity.getBody();
		assertNotNull(responseBody);

		List<User> responseUsers = (List<User>) responseBody.get("data");
		assertNotNull(responseUsers);
		assertEquals(2, responseUsers.size());

		PageInfo responsePageInfo = (PageInfo) responseBody.get("pageInfo");
		assertNotNull(responsePageInfo);
		assertEquals(mockPageInfo.isHasNextPage(), responsePageInfo.isHasNextPage());
		assertEquals(mockPageInfo.isHasPreviousPage(), responsePageInfo.isHasPreviousPage());
		assertEquals(mockPageInfo.getTotal(), responsePageInfo.getTotal());
	}
}
