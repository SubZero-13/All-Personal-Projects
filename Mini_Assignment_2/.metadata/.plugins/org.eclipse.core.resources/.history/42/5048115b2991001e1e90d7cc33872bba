package com.nagarro.Mini_Assignment_2.controller;

import com.nagarro.Mini_Assignment_2.controller.UserController;
import com.nagarro.Mini_Assignment_2.dtos.UserCreationRequest;
import com.nagarro.Mini_Assignment_2.dtos.UserResponse;
import com.nagarro.Mini_Assignment_2.serviceImpl.UserService;
import com.nagarro.Mini_Assignment_2.entities.User;
import com.nagarro.Mini_Assignment_2.validators.EnglishAlphabetsValidator;
import com.nagarro.Mini_Assignment_2.validators.NumericValidator;
import com.nagarro.Mini_Assignment_2.validators.ValidatorFactory;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class UserControllerTest {

	@Mock
	private UserService userService;

	@Mock
	private ValidatorFactory validatorFactory;

	@Mock
	private EnglishAlphabetsValidator englishAlphabetsValidator;

	@Mock
	private NumericValidator numericValidator;

	@InjectMocks
	private UserController userController;

	@Test
	@DisplayName("createUser Test")
	public void testCreateUsers() {
		// Arrange
		UserCreationRequest request = new UserCreationRequest();
		request.setSize(3);

		// Mocking the service response
//		when(userService.createUser(3)).thenReturn(Collections.singletonList(createMockUserResponse()));

		when(userService.createUser(3)).thenReturn(createMockUserResponses(3));

		// Act
		ResponseEntity<?> responseEntity = userController.createUsers(request);

		// Assert
		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());
		// Add more assertions based on your actual response structure
	}

	private UserResponse createMockUserResponse() {
		// Create and return a mock UserResponse for testing
		return new UserResponse("John Doe", "01 January 1990", "Male", 30, "US", "VERIFIED");
	}

	private List<UserResponse> createMockUserResponses(int count) {
		List<UserResponse> mockUserResponses = new ArrayList<>();
		for (int i = 0; i < count; i++) {
			mockUserResponses.add(createMockUserResponse());
		}
		return mockUserResponses;
	}

	@Test
	@DisplayName("getUser Test")
	void testGetUsers() {
		when(validatorFactory.getValidator(anyString())).thenReturn(englishAlphabetsValidator);
		when(validatorFactory.getValidator(eq("Limit"))).thenReturn(numericValidator);
		when(validatorFactory.getValidator(eq("Offset"))).thenReturn(numericValidator);
		// Mock data
		List<User> mockUsers = Arrays.asList(
				new User(1L, "Kazimira Shabliy", 67, "female", "15 March 1956", "UA", "VERIFIED",
						"Sat, 02 Dec 2023 14:37:14", "Sat, 02 Dec 2023 14:37:14"),
				new User(2L, "Rosa Oliver", 41, "female", "04 September 1982", "US", "TO_BE_VERIFIED",
						"Sat, 02 Dec 2023 15:06:34", "Sat, 02 Dec 2023 15:06:34"));

		// Mock service method
		when(userService.getUsers(anyString(), anyString(), anyInt(), anyInt(), any())).thenReturn(mockUsers);

		// Call the controller method
		ResponseEntity<Map<String, Object>> responseEntity = userController.getUsers("Age", "Odd", "2", "0");

		// Assert the response
		assertEquals(HttpStatus.OK, responseEntity.getStatusCode());

		Map<String, Object> responseBody = responseEntity.getBody();
		assertNotNull(responseBody);

		@SuppressWarnings("unchecked")
		List<User> responseUsers = (List<User>) responseBody.get("data");
		assertNotNull(responseUsers);
		assertEquals(2, responseUsers.size());
	}
}
